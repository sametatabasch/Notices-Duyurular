duyuru sistemi  nasıl olmalı tamamını  buraya yazdıktan sonra kodlama yapmak lazım  en  iyisi bu şekikde plan yapmadan kodlama yapmak sorun çıkartıyor 


Yeni yazı  ekler gibi  yeni  duyuru eklenebilecek yani  duyuru için post Type oluşturulacak. 

post type oluşturulduktan sonra duyuru yayınlanırken gerekli  sınırlamalar bilgiler girilmeli  bunun için duyuru ekleme sayfasına metabox eklenecek
metabox de duyurunun nasıl gözükeceği(bar,pencere), kime görüneceği(giriş yapmış kullanıcılara,herkese) ve duyurunun yayında kalma süresi (son gösterim tarihi).

metabox daki bilgileri işlemek için save post ve edit post kancalarını kullanacam 

duyurunun ekranda gözükmesi için yapılması gerekenler:
gosterimde olan birden fazla duyuru olabilir bunun için gösterim süresi dolmamış olan tüm duyurular bir diziye aktarılacak 

duyurular gösterilmek için döngüye girecek döngüde duyurunun kimlere gözükeceği ve nasıl  gözükeceği tespit edilecek 

eğer pencere ile gösterilecek ise fancybox eklenecek 





<?php
/*
    Plugin Name: Duyurular
    Plugin URI: http://www.gençbilişim.net
    Description: Gençbilişim Duyurular
    Author: Samet ATABAŞ
    Version: 1.0
    Author URI: http://www.gençbilişim.net
*/

/**
 * Duyurular class ı
 * @author Samet ATABAŞ
 *
 */
class Duyurular
{
    /**
     * eklenti dizinini tutar
     * @var path string
     */
    private $path;

    function __construct()
    {
        //eklenti dizinini tanımla
        $this->path = plugin_dir_url(__FILE__);
        //duyurular için Duyuru  post type ını ekle
        add_action('init', array(&$this, 'postTypeOlustur'));
        // yazı  editorü sayfasına widget ekleme
        add_action('add_meta_boxes', array(&$this, 'duyuruMetaBoxEkle'));
        // duyuru kaydedildiği zaman meta box taki  verileri işlemek için kullanılır
        add_action('save_post', array(&$this, 'duyuruOlustur'));
        // duyuru düzenlerdiği zaman meta box taki  verileri işlemek için kullanılır
        add_action('edit_post', array(&$this, 'duyuruDuzenle'));

        add_action('wp_loaded', array(&$this, 'duyuruGoster'));
    }

    /**
     * init action a Duyurular için yeni  post type ın  özelliklerini belirler.
     */
    public function postTypeOlustur()
    {
        register_post_type('Duyuru',
            array(
                'labels' => array( /*labels kullanılan başlıkları belirlemeye yarıyor*/
                    'name' => 'Duyuru',
                    'singular_name' => 'Duyuru',
                    /*'add_new' => _x('Add New', 'book'), çoklu  dil  için örnek*/
                    'add_new' => 'Yeni Duyuru',
                    'add_new_item' => 'Yeni Duyuru Ekle',
                    'edit_item' => 'Duyuruyu Düzenle',
                    'new_item' => 'Yeni Duyuru',
                    'all_items' => 'Tüm Duyurular',
                    'view_item' => 'Duyuruyu Göster',
                    'search_items' => 'Duyuru Ara',
                    'not_found' => 'Duyuru Bulunamadı',
                    'not_found_in_trash' => 'Silinen Duyuru Yok',
                    'parent_item_colon' => '',
                    'menu_name' => 'Duyurular'
                ),
                'public' => false,
                'has_archive' => true,
                'show_ui' => true,
                'show_in_menu' => true,
            )
        );
    }

    /**
     * Duyuru bilgilerini veritabanından alan fonksiyon
     * tüm duyuruları enson yazılan ilk olacak şekilde dizi içinde saklar
     * @return array
     */
    public static function duyuruMeta()
    { //todo tüm duyurular yerine sadece yayınlama tarihi dolmamış duyuruları alsın
        global $wpdb;
        return $wpdb->get_results("SELECT * FROM $wpdb->posts  WHERE post_type='duyuru' AND post_status='publish' ORDER BY ID DESC", ARRAY_A);

    }

    /**
     * Duyuruyu tarihi gösterecek fonksiyon
     *
     * @return string
     */
    public static function duyuruTarihi()
    {
        $tarih = self::duyuruMeta();
        echo get_date_from_gmt($tarih[0]["post_date_gmt"], 'Y.m.d');
    }

    /**
     * duyuruGoster fonksiyonu
     * duyurunun gösterim tarihine kimlerin göreceğine ve nasıl görüneceğine göre duyuruyu gösteren fonksiyon
     *
     */
    public function duyuruGoster()
    {
        $duyuruMeta = self::duyuruMeta();
        $gosteriModu = get_post_meta($duyuruMeta[0]['ID'], "gosteriModu", 1);
        switch ($gosteriModu) {
            case 'pencere':
                function add_script(){
                    wp_enqueue_script('jquery');
                    wp_register_script('fancbox',plugins_url('/fancybox/source/jquery.fancybox.js?v=2.1.5', __FILE__));
                    //wp_register_style('fancbox',plugins_url('/fancybox/source/jquery.fancybox.css?v=2.1.5', __FILE__));
                    wp_enqueue_script('fancybox');
                    //wp_enqueue_style('fancybox');
                }
                add_action('wp_enqueue_scripts','add_script');
                //add_action('wp_head', array(&$this, 'duyuruFancbox'));
                $duyuru = '
                <div id="duyuru" class="">
                    <div class="">
                   Başlık
                    </div>
                   <div class="">
                   içerik içerik içerik
                   </div>
                </div>
                <a href="#duyuru" id="duyuruLink" class="fancybox" style="display: none;"> </a>
                <script type=\"text/javascript\">
				$(document).ready(function() {
					$("#duyuruLink").trigger("click");
				});
        </script>
                ';
                break;
            case 'bar':

                break;
        }

        $kimlerGorsun = get_post_meta($duyuruMeta[0]['ID'], "kimlerGorsun", 1);
        switch ($kimlerGorsun) {
            case 'herkes':
                eecho $duyuru;
                break;
            case 'uyeler':
                if (is_user_logged_in()) {
                    add_action('wp_head', array(&$this, 'duyuruFancbox'));
                }
                break;
        }

    }

    /**
     * Duyuruyu için fancyboy ı  yükler ve duyuruyu ekranda gösterir
     */
    function duyuruFancbox()
    {
        //$mtn = self::duyuruMetni(false) . '<br><input type="checkbox" name="okundu">Bir daha gösterme';
        echo "
			<script type=\"text/javascript\">
				$(document).ready(function() {
					$('.fancybox').fancybox({margin: 0, autoCenter: true, autoResize: true, closeBtn: false, minHeight: 0});
				});
			</script>";
    }

    /**
     * Duyuru meta box ekler
     * Duyuru oluşturma ve düzenleme sayfasına ayarlamalar için widget içeriği
     *
     */
    public function duyuruMetaBoxEkle()
    {
        function duyuruMetaBox()
        {
            global $post_id, $wp_locale;
            $kimlerGorsun = get_post_meta($post_id, "kimlerGorsun", 1);
            $gosteriModu = get_post_meta($post_id, "gosteriModu", 1);
            $date = array(
                'year' => substr(get_date_from_gmt(gmdate('Y-m-d H:i:s')), 0, 4),
                'mday' => substr(get_date_from_gmt(gmdate('Y-m-d H:i:s')), 8, 2),
                'hours' => substr(get_date_from_gmt(gmdate('Y-m-d H:i:s')), 11, 2),
                'minutes' => substr(get_date_from_gmt(gmdate('Y-m-d H:i:s')), 14, 2)
            );
            $out = '
            <form>
                <div class="misc-pub-section">
                    <span><b>Kimler görsün:</b></span>
                    <select name="kimlerGorsun">
                        <option ';
            if ($kimlerGorsun == 'herkes') {
                $out .= 'selected=""';
            }
            $out .= ' value="herkes">Herkes</option>
                        <option ';
            if ($kimlerGorsun == 'uyeler') {
                $out .= 'selected=""';
            }
            $out .= ' value="uyeler">Sadece Üyeler
            </option>
            </select>
            </div>
            <div class="misc-pub-section">
                <span><b>Gösterim Modu:</b></span>
                <select name="gosterimModu">
                    <option ';
            if ($gosteriModu == 'pencere') {
                $out .= 'selected=""';
            }
            $out .= ' value="pencere">Pencere
                    </option>
                    <option ';
            if ($gosteriModu == 'bar') {
                $out .= 'selected=""';
            }
            $out .= ' value="bar">Uyarı Şeridi
                    </option>
                </select>
            </div>
            <div class="clear"></div>
            <div class="misc-pub-section misc-pub-section-last curtime">
                <span id="timestamp">
                    <b>Son Gösterim Tarihi</b>
                </span><br/>
                <input type="text" maxlength="2" size="2" value="' . $date["mday"] . '" name="gun" id="jj">.
                <select name="ay" id="mm">';
            for ($i = 1; $i <= 12; $i++) {
                $out .= '<option ';
                if ($i == date('m')) $out .= 'selected="selected"';
                $out .= ' value="' . $i . '">' . $i . '-' . $wp_locale->get_month_abbrev($wp_locale->get_month($i)) . '</option>';
            }
            $out .= '
                </select>.
                <input type="text" maxlength="4" size="4" value="' . $date["year"] . '" name="yil" id="aa"> @
                <input type="text" maxlength="2" size="2" value="' . $date["hours"] . '" name="saat" id="hh"> :
                <input type="text" maxlength="2" size="2" value="' . $date["minutes"] . '" name="dakika" id="mn">
            </div>
            </form>';
            echo $out;
        }

        add_meta_box('duyuruMetaBox', 'Duyuru ayarları', 'duyuruMetaBox', 'Duyuru', 'side', 'default');
    }

    /**
     * Duyuru  Meta box  içeriğindeki verileri alıp  işleyerek  duyuruyo oluştururken ek işlenmleri yapacak
     * Post ile verileri alacak
     *
     * add_action('save_post', array(&$this, 'duyuruOlustur'));
     */
    public function duyuruOlustur()
    {
        global $post_id;
        $kimlerGorsun = $_POST["kimlerGorsun"];
        $gosteriModu = $_POST["gosterimModu"];
        $gun = $_POST['gun'];
        $ay = $_POST['ay'];
        $yil = $_POST['yil'];
        $saat = $_POST['saat'];
        $dakika = $_POST['dakika'];
        $sonGosterimTarihi = $gun . '-' . $ay . '-' . $yil . ' ' . $saat . ':' . $dakika;
        add_post_meta($post_id, "kimlerGorsun", $kimlerGorsun, true);
        add_post_meta($post_id, "gosteriModu", $gosteriModu, true);
        add_post_meta($post_id, "sonGosterimTarihi", $sonGosterimTarihi, true);
    }

    /**
     * duyuru  güncellendiği zaman yapılacak  olan düzenlemeler bu  fonksiyonile yapılıyor
     *
     * add_action('edit_post', array(&$this, 'duyuruDuzenle'));
     */
    public function duyuruDuzenle()
    {
        global $post_id;
        $kimlerGorsun = $_POST["kimlerGorsun"];
        $gosteriModu = $_POST["gosterimModu"];
        $gun = $_POST['gun'];
        $ay = $_POST['ay'];
        $yil = $_POST['yil'];
        $saat = $_POST['saat'];
        $dakika = $_POST['dakika'];
        $sonGosterimTarihi = $gun . '-' . $ay . '-' . $yil . ' ' . $saat . ':' . $dakika;
        update_post_meta($post_id, "kimlerGorsun", $kimlerGorsun);
        update_post_meta($post_id, "gosteriModu", $gosteriModu);
        update_post_meta($post_id, "sonGosterimTarihi", $sonGosterimTarihi, true);
    }
    /**
     *
     * Yayınlanan duyuruyu  kullanıcı  yada ziyaretci  okundu olarak işaretlediğinde çalışır
     * add_action('template_redirect', 'wp_favorite_posts'); bu actionu  kullanacam ziyaretci için cookie üye için meta kullanıcam
     *
     */
}

$duyuru = new Duyurular();
?>